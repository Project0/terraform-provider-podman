// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExecInspectOKBody exec inspect o k body
//
// swagger:model execInspectOKBody
type ExecInspectOKBody struct {

	// CanRemove is legacy and used purely for compatibility reasons.
	// Will always be set to true, unless the exec session is running.
	CanRemove bool `json:"CanRemove,omitempty"`

	// ContainerID is the ID of the container this exec session is attached
	// to.
	ContainerID string `json:"ContainerID,omitempty"`

	// DetachKeys are the detach keys used by the exec session.
	// If set to "" the default keys are being used.
	// Will show "<none>" if no detach keys are set.
	DetachKeys string `json:"DetachKeys,omitempty"`

	// ExitCode is the exit code of the exec session. Will be set to 0 if
	// the exec session has not yet exited.
	ExitCode int64 `json:"ExitCode,omitempty"`

	// ID is the ID of the exec session.
	ID string `json:"ID,omitempty"`

	// OpenStderr is whether the container's STDERR stream will be attached.
	// Always set to true if the exec session created a TTY.
	OpenStderr bool `json:"OpenStderr,omitempty"`

	// OpenStdin is whether the container's STDIN stream will be attached
	// to.
	OpenStdin bool `json:"OpenStdin,omitempty"`

	// OpenStdout is whether the container's STDOUT stream will be attached.
	// Always set to true if the exec session created a TTY.
	OpenStdout bool `json:"OpenStdout,omitempty"`

	// Pid is the PID of the exec session's process.
	// Will be set to 0 if the exec session is not running.
	Pid int64 `json:"Pid,omitempty"`

	// process config
	ProcessConfig *InspectExecProcess `json:"ProcessConfig,omitempty"`

	// Running is whether the exec session is running.
	Running bool `json:"Running,omitempty"`
}

// Validate validates this exec inspect o k body
func (m *ExecInspectOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProcessConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecInspectOKBody) validateProcessConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessConfig) { // not required
		return nil
	}

	if m.ProcessConfig != nil {
		if err := m.ProcessConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProcessConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ProcessConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this exec inspect o k body based on the context it is used
func (m *ExecInspectOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProcessConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecInspectOKBody) contextValidateProcessConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ProcessConfig != nil {
		if err := m.ProcessConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProcessConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ProcessConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExecInspectOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExecInspectOKBody) UnmarshalBinary(b []byte) error {
	var res ExecInspectOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
