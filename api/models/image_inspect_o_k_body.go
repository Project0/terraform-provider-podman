// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ImageInspectOKBody image inspect o k body
//
// swagger:model imageInspectOKBody
type ImageInspectOKBody struct {

	// architecture
	Architecture string `json:"Architecture,omitempty"`

	// author
	Author string `json:"Author,omitempty"`

	// comment
	Comment string `json:"Comment,omitempty"`

	// config
	Config *Config `json:"Config,omitempty"`

	// container
	Container string `json:"Container,omitempty"`

	// container config
	ContainerConfig *Config `json:"ContainerConfig,omitempty"`

	// created
	Created string `json:"Created,omitempty"`

	// docker version
	DockerVersion string `json:"DockerVersion,omitempty"`

	// graph driver
	GraphDriver *GraphDriverData `json:"GraphDriver,omitempty"`

	// ID
	ID string `json:"Id,omitempty"`

	// metadata
	Metadata *ImageMetadata `json:"Metadata,omitempty"`

	// os
	Os string `json:"Os,omitempty"`

	// os version
	OsVersion string `json:"OsVersion,omitempty"`

	// parent
	Parent string `json:"Parent,omitempty"`

	// repo digests
	RepoDigests []string `json:"RepoDigests"`

	// repo tags
	RepoTags []string `json:"RepoTags"`

	// root f s
	RootFS *RootFS `json:"RootFS,omitempty"`

	// size
	Size int64 `json:"Size,omitempty"`

	// variant
	Variant string `json:"Variant,omitempty"`

	// virtual size
	VirtualSize int64 `json:"VirtualSize,omitempty"`
}

// Validate validates this image inspect o k body
func (m *ImageInspectOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGraphDriver(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootFS(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageInspectOKBody) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Config")
			}
			return err
		}
	}

	return nil
}

func (m *ImageInspectOKBody) validateContainerConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ContainerConfig) { // not required
		return nil
	}

	if m.ContainerConfig != nil {
		if err := m.ContainerConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ContainerConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ContainerConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ImageInspectOKBody) validateGraphDriver(formats strfmt.Registry) error {
	if swag.IsZero(m.GraphDriver) { // not required
		return nil
	}

	if m.GraphDriver != nil {
		if err := m.GraphDriver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GraphDriver")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GraphDriver")
			}
			return err
		}
	}

	return nil
}

func (m *ImageInspectOKBody) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ImageInspectOKBody) validateRootFS(formats strfmt.Registry) error {
	if swag.IsZero(m.RootFS) { // not required
		return nil
	}

	if m.RootFS != nil {
		if err := m.RootFS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RootFS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RootFS")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this image inspect o k body based on the context it is used
func (m *ImageInspectOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContainerConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGraphDriver(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRootFS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageInspectOKBody) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {
		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Config")
			}
			return err
		}
	}

	return nil
}

func (m *ImageInspectOKBody) contextValidateContainerConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ContainerConfig != nil {
		if err := m.ContainerConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ContainerConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ContainerConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ImageInspectOKBody) contextValidateGraphDriver(ctx context.Context, formats strfmt.Registry) error {

	if m.GraphDriver != nil {
		if err := m.GraphDriver.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GraphDriver")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GraphDriver")
			}
			return err
		}
	}

	return nil
}

func (m *ImageInspectOKBody) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ImageInspectOKBody) contextValidateRootFS(ctx context.Context, formats strfmt.Registry) error {

	if m.RootFS != nil {
		if err := m.RootFS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RootFS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RootFS")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImageInspectOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageInspectOKBody) UnmarshalBinary(b []byte) error {
	var res ImageInspectOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
