// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PodStatsAllLibpodOKBody pod stats all libpod o k body
//
// swagger:model podStatsAllLibpodOKBody
type PodStatsAllLibpodOKBody struct {

	// Each process running in the container, where each is process
	// is an array of values corresponding to the titles.
	// Required: true
	Processes [][]string `json:"Processes"`

	// The ps column titles
	// Required: true
	Titles []string `json:"Titles"`
}

// Validate validates this pod stats all libpod o k body
func (m *PodStatsAllLibpodOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProcesses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodStatsAllLibpodOKBody) validateProcesses(formats strfmt.Registry) error {

	if err := validate.Required("Processes", "body", m.Processes); err != nil {
		return err
	}

	return nil
}

func (m *PodStatsAllLibpodOKBody) validateTitles(formats strfmt.Registry) error {

	if err := validate.Required("Titles", "body", m.Titles); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this pod stats all libpod o k body based on context it is used
func (m *PodStatsAllLibpodOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PodStatsAllLibpodOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PodStatsAllLibpodOKBody) UnmarshalBinary(b []byte) error {
	var res PodStatsAllLibpodOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
