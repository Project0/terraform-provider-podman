// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SystemPruneLibpodOKBody system prune libpod o k body
//
// swagger:model systemPruneLibpodOKBody
type SystemPruneLibpodOKBody struct {

	// container prune reports
	ContainerPruneReports []*PruneReport `json:"ContainerPruneReports"`

	// image prune reports
	ImagePruneReports []*PruneReport `json:"ImagePruneReports"`

	// pod prune report
	PodPruneReport []*PodPruneReport `json:"PodPruneReport"`

	// reclaimed space
	ReclaimedSpace uint64 `json:"ReclaimedSpace,omitempty"`

	// volume prune reports
	VolumePruneReports []*PruneReport `json:"VolumePruneReports"`
}

// Validate validates this system prune libpod o k body
func (m *SystemPruneLibpodOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainerPruneReports(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImagePruneReports(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodPruneReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumePruneReports(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemPruneLibpodOKBody) validateContainerPruneReports(formats strfmt.Registry) error {
	if swag.IsZero(m.ContainerPruneReports) { // not required
		return nil
	}

	for i := 0; i < len(m.ContainerPruneReports); i++ {
		if swag.IsZero(m.ContainerPruneReports[i]) { // not required
			continue
		}

		if m.ContainerPruneReports[i] != nil {
			if err := m.ContainerPruneReports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ContainerPruneReports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ContainerPruneReports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemPruneLibpodOKBody) validateImagePruneReports(formats strfmt.Registry) error {
	if swag.IsZero(m.ImagePruneReports) { // not required
		return nil
	}

	for i := 0; i < len(m.ImagePruneReports); i++ {
		if swag.IsZero(m.ImagePruneReports[i]) { // not required
			continue
		}

		if m.ImagePruneReports[i] != nil {
			if err := m.ImagePruneReports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ImagePruneReports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ImagePruneReports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemPruneLibpodOKBody) validatePodPruneReport(formats strfmt.Registry) error {
	if swag.IsZero(m.PodPruneReport) { // not required
		return nil
	}

	for i := 0; i < len(m.PodPruneReport); i++ {
		if swag.IsZero(m.PodPruneReport[i]) { // not required
			continue
		}

		if m.PodPruneReport[i] != nil {
			if err := m.PodPruneReport[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PodPruneReport" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PodPruneReport" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemPruneLibpodOKBody) validateVolumePruneReports(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumePruneReports) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumePruneReports); i++ {
		if swag.IsZero(m.VolumePruneReports[i]) { // not required
			continue
		}

		if m.VolumePruneReports[i] != nil {
			if err := m.VolumePruneReports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("VolumePruneReports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("VolumePruneReports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this system prune libpod o k body based on the context it is used
func (m *SystemPruneLibpodOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContainerPruneReports(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImagePruneReports(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePodPruneReport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumePruneReports(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemPruneLibpodOKBody) contextValidateContainerPruneReports(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ContainerPruneReports); i++ {

		if m.ContainerPruneReports[i] != nil {
			if err := m.ContainerPruneReports[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ContainerPruneReports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ContainerPruneReports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemPruneLibpodOKBody) contextValidateImagePruneReports(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ImagePruneReports); i++ {

		if m.ImagePruneReports[i] != nil {
			if err := m.ImagePruneReports[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ImagePruneReports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ImagePruneReports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemPruneLibpodOKBody) contextValidatePodPruneReport(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PodPruneReport); i++ {

		if m.PodPruneReport[i] != nil {
			if err := m.PodPruneReport[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PodPruneReport" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PodPruneReport" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemPruneLibpodOKBody) contextValidateVolumePruneReports(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VolumePruneReports); i++ {

		if m.VolumePruneReports[i] != nil {
			if err := m.VolumePruneReports[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("VolumePruneReports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("VolumePruneReports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SystemPruneLibpodOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemPruneLibpodOKBody) UnmarshalBinary(b []byte) error {
	var res SystemPruneLibpodOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
