// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/project0/terraform-provider-podman/api/models"
)

// NetworkDisconnectReader is a Reader for the NetworkDisconnect structure.
type NetworkDisconnectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NetworkDisconnectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNetworkDisconnectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNetworkDisconnectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewNetworkDisconnectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewNetworkDisconnectOK creates a NetworkDisconnectOK with default headers values
func NewNetworkDisconnectOK() *NetworkDisconnectOK {
	return &NetworkDisconnectOK{}
}

/* NetworkDisconnectOK describes a response with status code 200, with default header values.

OK
*/
type NetworkDisconnectOK struct {
}

func (o *NetworkDisconnectOK) Error() string {
	return fmt.Sprintf("[POST /networks/{name}/disconnect][%d] networkDisconnectOK ", 200)
}

func (o *NetworkDisconnectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewNetworkDisconnectBadRequest creates a NetworkDisconnectBadRequest with default headers values
func NewNetworkDisconnectBadRequest() *NetworkDisconnectBadRequest {
	return &NetworkDisconnectBadRequest{}
}

/* NetworkDisconnectBadRequest describes a response with status code 400, with default header values.

Bad parameter in request
*/
type NetworkDisconnectBadRequest struct {
	Payload *models.NetworkDisconnectBadRequestBody
}

func (o *NetworkDisconnectBadRequest) Error() string {
	return fmt.Sprintf("[POST /networks/{name}/disconnect][%d] networkDisconnectBadRequest  %+v", 400, o.Payload)
}
func (o *NetworkDisconnectBadRequest) GetPayload() *models.NetworkDisconnectBadRequestBody {
	return o.Payload
}

func (o *NetworkDisconnectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NetworkDisconnectBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetworkDisconnectInternalServerError creates a NetworkDisconnectInternalServerError with default headers values
func NewNetworkDisconnectInternalServerError() *NetworkDisconnectInternalServerError {
	return &NetworkDisconnectInternalServerError{}
}

/* NetworkDisconnectInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type NetworkDisconnectInternalServerError struct {
	Payload *models.NetworkDisconnectInternalServerErrorBody
}

func (o *NetworkDisconnectInternalServerError) Error() string {
	return fmt.Sprintf("[POST /networks/{name}/disconnect][%d] networkDisconnectInternalServerError  %+v", 500, o.Payload)
}
func (o *NetworkDisconnectInternalServerError) GetPayload() *models.NetworkDisconnectInternalServerErrorBody {
	return o.Payload
}

func (o *NetworkDisconnectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NetworkDisconnectInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
