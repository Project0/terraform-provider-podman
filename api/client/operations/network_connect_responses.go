// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/project0/terraform-provider-podman/api/models"
)

// NetworkConnectReader is a Reader for the NetworkConnect structure.
type NetworkConnectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NetworkConnectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNetworkConnectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNetworkConnectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewNetworkConnectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewNetworkConnectOK creates a NetworkConnectOK with default headers values
func NewNetworkConnectOK() *NetworkConnectOK {
	return &NetworkConnectOK{}
}

/* NetworkConnectOK describes a response with status code 200, with default header values.

OK
*/
type NetworkConnectOK struct {
}

func (o *NetworkConnectOK) Error() string {
	return fmt.Sprintf("[POST /networks/{name}/connect][%d] networkConnectOK ", 200)
}

func (o *NetworkConnectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewNetworkConnectBadRequest creates a NetworkConnectBadRequest with default headers values
func NewNetworkConnectBadRequest() *NetworkConnectBadRequest {
	return &NetworkConnectBadRequest{}
}

/* NetworkConnectBadRequest describes a response with status code 400, with default header values.

Bad parameter in request
*/
type NetworkConnectBadRequest struct {
	Payload *models.NetworkConnectBadRequestBody
}

func (o *NetworkConnectBadRequest) Error() string {
	return fmt.Sprintf("[POST /networks/{name}/connect][%d] networkConnectBadRequest  %+v", 400, o.Payload)
}
func (o *NetworkConnectBadRequest) GetPayload() *models.NetworkConnectBadRequestBody {
	return o.Payload
}

func (o *NetworkConnectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NetworkConnectBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetworkConnectInternalServerError creates a NetworkConnectInternalServerError with default headers values
func NewNetworkConnectInternalServerError() *NetworkConnectInternalServerError {
	return &NetworkConnectInternalServerError{}
}

/* NetworkConnectInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type NetworkConnectInternalServerError struct {
	Payload *models.NetworkConnectInternalServerErrorBody
}

func (o *NetworkConnectInternalServerError) Error() string {
	return fmt.Sprintf("[POST /networks/{name}/connect][%d] networkConnectInternalServerError  %+v", 500, o.Payload)
}
func (o *NetworkConnectInternalServerError) GetPayload() *models.NetworkConnectInternalServerErrorBody {
	return o.Payload
}

func (o *NetworkConnectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NetworkConnectInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
