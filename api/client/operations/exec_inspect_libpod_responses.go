// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/project0/terraform-provider-podman/api/models"
)

// ExecInspectLibpodReader is a Reader for the ExecInspectLibpod structure.
type ExecInspectLibpodReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecInspectLibpodReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecInspectLibpodOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewExecInspectLibpodNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecInspectLibpodInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewExecInspectLibpodOK creates a ExecInspectLibpodOK with default headers values
func NewExecInspectLibpodOK() *ExecInspectLibpodOK {
	return &ExecInspectLibpodOK{}
}

/* ExecInspectLibpodOK describes a response with status code 200, with default header values.

no error
*/
type ExecInspectLibpodOK struct {
}

func (o *ExecInspectLibpodOK) Error() string {
	return fmt.Sprintf("[GET /libpod/exec/{id}/json][%d] execInspectLibpodOK ", 200)
}

func (o *ExecInspectLibpodOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExecInspectLibpodNotFound creates a ExecInspectLibpodNotFound with default headers values
func NewExecInspectLibpodNotFound() *ExecInspectLibpodNotFound {
	return &ExecInspectLibpodNotFound{}
}

/* ExecInspectLibpodNotFound describes a response with status code 404, with default header values.

No such exec instance
*/
type ExecInspectLibpodNotFound struct {
	Payload *models.ExecInspectLibpodNotFoundBody
}

func (o *ExecInspectLibpodNotFound) Error() string {
	return fmt.Sprintf("[GET /libpod/exec/{id}/json][%d] execInspectLibpodNotFound  %+v", 404, o.Payload)
}
func (o *ExecInspectLibpodNotFound) GetPayload() *models.ExecInspectLibpodNotFoundBody {
	return o.Payload
}

func (o *ExecInspectLibpodNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExecInspectLibpodNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecInspectLibpodInternalServerError creates a ExecInspectLibpodInternalServerError with default headers values
func NewExecInspectLibpodInternalServerError() *ExecInspectLibpodInternalServerError {
	return &ExecInspectLibpodInternalServerError{}
}

/* ExecInspectLibpodInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type ExecInspectLibpodInternalServerError struct {
	Payload *models.ExecInspectLibpodInternalServerErrorBody
}

func (o *ExecInspectLibpodInternalServerError) Error() string {
	return fmt.Sprintf("[GET /libpod/exec/{id}/json][%d] execInspectLibpodInternalServerError  %+v", 500, o.Payload)
}
func (o *ExecInspectLibpodInternalServerError) GetPayload() *models.ExecInspectLibpodInternalServerErrorBody {
	return o.Payload
}

func (o *ExecInspectLibpodInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExecInspectLibpodInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
