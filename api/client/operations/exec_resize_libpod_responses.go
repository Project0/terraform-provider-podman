// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/project0/terraform-provider-podman/api/models"
)

// ExecResizeLibpodReader is a Reader for the ExecResizeLibpod structure.
type ExecResizeLibpodReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecResizeLibpodReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewExecResizeLibpodCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewExecResizeLibpodNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecResizeLibpodInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewExecResizeLibpodCreated creates a ExecResizeLibpodCreated with default headers values
func NewExecResizeLibpodCreated() *ExecResizeLibpodCreated {
	return &ExecResizeLibpodCreated{}
}

/* ExecResizeLibpodCreated describes a response with status code 201, with default header values.

no error
*/
type ExecResizeLibpodCreated struct {
}

func (o *ExecResizeLibpodCreated) Error() string {
	return fmt.Sprintf("[POST /libpod/exec/{id}/resize][%d] execResizeLibpodCreated ", 201)
}

func (o *ExecResizeLibpodCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExecResizeLibpodNotFound creates a ExecResizeLibpodNotFound with default headers values
func NewExecResizeLibpodNotFound() *ExecResizeLibpodNotFound {
	return &ExecResizeLibpodNotFound{}
}

/* ExecResizeLibpodNotFound describes a response with status code 404, with default header values.

No such exec instance
*/
type ExecResizeLibpodNotFound struct {
	Payload *models.ExecResizeLibpodNotFoundBody
}

func (o *ExecResizeLibpodNotFound) Error() string {
	return fmt.Sprintf("[POST /libpod/exec/{id}/resize][%d] execResizeLibpodNotFound  %+v", 404, o.Payload)
}
func (o *ExecResizeLibpodNotFound) GetPayload() *models.ExecResizeLibpodNotFoundBody {
	return o.Payload
}

func (o *ExecResizeLibpodNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExecResizeLibpodNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecResizeLibpodInternalServerError creates a ExecResizeLibpodInternalServerError with default headers values
func NewExecResizeLibpodInternalServerError() *ExecResizeLibpodInternalServerError {
	return &ExecResizeLibpodInternalServerError{}
}

/* ExecResizeLibpodInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type ExecResizeLibpodInternalServerError struct {
	Payload *models.ExecResizeLibpodInternalServerErrorBody
}

func (o *ExecResizeLibpodInternalServerError) Error() string {
	return fmt.Sprintf("[POST /libpod/exec/{id}/resize][%d] execResizeLibpodInternalServerError  %+v", 500, o.Payload)
}
func (o *ExecResizeLibpodInternalServerError) GetPayload() *models.ExecResizeLibpodInternalServerErrorBody {
	return o.Payload
}

func (o *ExecResizeLibpodInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExecResizeLibpodInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
