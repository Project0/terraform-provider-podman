// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/project0/terraform-provider-podman/api/models"
)

// PodExistsLibpodReader is a Reader for the PodExistsLibpod structure.
type PodExistsLibpodReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PodExistsLibpodReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPodExistsLibpodNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPodExistsLibpodNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPodExistsLibpodInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPodExistsLibpodNoContent creates a PodExistsLibpodNoContent with default headers values
func NewPodExistsLibpodNoContent() *PodExistsLibpodNoContent {
	return &PodExistsLibpodNoContent{}
}

/* PodExistsLibpodNoContent describes a response with status code 204, with default header values.

pod exists
*/
type PodExistsLibpodNoContent struct {
}

func (o *PodExistsLibpodNoContent) Error() string {
	return fmt.Sprintf("[GET /libpod/pods/{name}/exists][%d] podExistsLibpodNoContent ", 204)
}

func (o *PodExistsLibpodNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPodExistsLibpodNotFound creates a PodExistsLibpodNotFound with default headers values
func NewPodExistsLibpodNotFound() *PodExistsLibpodNotFound {
	return &PodExistsLibpodNotFound{}
}

/* PodExistsLibpodNotFound describes a response with status code 404, with default header values.

No such pod
*/
type PodExistsLibpodNotFound struct {
	Payload *models.PodExistsLibpodNotFoundBody
}

func (o *PodExistsLibpodNotFound) Error() string {
	return fmt.Sprintf("[GET /libpod/pods/{name}/exists][%d] podExistsLibpodNotFound  %+v", 404, o.Payload)
}
func (o *PodExistsLibpodNotFound) GetPayload() *models.PodExistsLibpodNotFoundBody {
	return o.Payload
}

func (o *PodExistsLibpodNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PodExistsLibpodNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPodExistsLibpodInternalServerError creates a PodExistsLibpodInternalServerError with default headers values
func NewPodExistsLibpodInternalServerError() *PodExistsLibpodInternalServerError {
	return &PodExistsLibpodInternalServerError{}
}

/* PodExistsLibpodInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type PodExistsLibpodInternalServerError struct {
	Payload *models.PodExistsLibpodInternalServerErrorBody
}

func (o *PodExistsLibpodInternalServerError) Error() string {
	return fmt.Sprintf("[GET /libpod/pods/{name}/exists][%d] podExistsLibpodInternalServerError  %+v", 500, o.Payload)
}
func (o *PodExistsLibpodInternalServerError) GetPayload() *models.PodExistsLibpodInternalServerErrorBody {
	return o.Payload
}

func (o *PodExistsLibpodInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PodExistsLibpodInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
