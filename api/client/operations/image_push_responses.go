// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/project0/terraform-provider-podman/api/models"
)

// ImagePushReader is a Reader for the ImagePush structure.
type ImagePushReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *ImagePushReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewImagePushOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewImagePushNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewImagePushInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewImagePushOK creates a ImagePushOK with default headers values
func NewImagePushOK(writer io.Writer) *ImagePushOK {
	return &ImagePushOK{

		Payload: writer,
	}
}

/* ImagePushOK describes a response with status code 200, with default header values.

no error
*/
type ImagePushOK struct {
	Payload io.Writer
}

func (o *ImagePushOK) Error() string {
	return fmt.Sprintf("[POST /images/{name}/push][%d] imagePushOK  %+v", 200, o.Payload)
}
func (o *ImagePushOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *ImagePushOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImagePushNotFound creates a ImagePushNotFound with default headers values
func NewImagePushNotFound() *ImagePushNotFound {
	return &ImagePushNotFound{}
}

/* ImagePushNotFound describes a response with status code 404, with default header values.

No such image
*/
type ImagePushNotFound struct {
	Payload *models.ImagePushNotFoundBody
}

func (o *ImagePushNotFound) Error() string {
	return fmt.Sprintf("[POST /images/{name}/push][%d] imagePushNotFound  %+v", 404, o.Payload)
}
func (o *ImagePushNotFound) GetPayload() *models.ImagePushNotFoundBody {
	return o.Payload
}

func (o *ImagePushNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ImagePushNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImagePushInternalServerError creates a ImagePushInternalServerError with default headers values
func NewImagePushInternalServerError() *ImagePushInternalServerError {
	return &ImagePushInternalServerError{}
}

/* ImagePushInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type ImagePushInternalServerError struct {
	Payload *models.ImagePushInternalServerErrorBody
}

func (o *ImagePushInternalServerError) Error() string {
	return fmt.Sprintf("[POST /images/{name}/push][%d] imagePushInternalServerError  %+v", 500, o.Payload)
}
func (o *ImagePushInternalServerError) GetPayload() *models.ImagePushInternalServerErrorBody {
	return o.Payload
}

func (o *ImagePushInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ImagePushInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
