// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ContainerArchive(params *ContainerArchiveParams, writer io.Writer, opts ...ClientOption) (*ContainerArchiveOK, error)

	ContainerArchiveLibpod(params *ContainerArchiveLibpodParams, writer io.Writer, opts ...ClientOption) (*ContainerArchiveLibpodOK, error)

	ContainerAttach(params *ContainerAttachParams, opts ...ClientOption) error

	ContainerAttachLibpod(params *ContainerAttachLibpodParams, opts ...ClientOption) error

	ContainerChangesLibpod(params *ContainerChangesLibpodParams, opts ...ClientOption) (*ContainerChangesLibpodOK, error)

	ContainerCheckpointLibpod(params *ContainerCheckpointLibpodParams, opts ...ClientOption) (*ContainerCheckpointLibpodOK, error)

	ContainerCreate(params *ContainerCreateParams, opts ...ClientOption) (*ContainerCreateCreated, error)

	ContainerCreateLibpod(params *ContainerCreateLibpodParams, opts ...ClientOption) (*ContainerCreateLibpodCreated, error)

	ContainerDelete(params *ContainerDeleteParams, opts ...ClientOption) (*ContainerDeleteNoContent, error)

	ContainerDeleteLibpod(params *ContainerDeleteLibpodParams, opts ...ClientOption) (*ContainerDeleteLibpodOK, *ContainerDeleteLibpodNoContent, error)

	ContainerExec(params *ContainerExecParams, opts ...ClientOption) (*ContainerExecCreated, error)

	ContainerExecLibpod(params *ContainerExecLibpodParams, opts ...ClientOption) (*ContainerExecLibpodCreated, error)

	ContainerExistsLibpod(params *ContainerExistsLibpodParams, opts ...ClientOption) (*ContainerExistsLibpodNoContent, error)

	ContainerExport(params *ContainerExportParams, opts ...ClientOption) (*ContainerExportOK, error)

	ContainerExportLibpod(params *ContainerExportLibpodParams, opts ...ClientOption) (*ContainerExportLibpodOK, error)

	ContainerHealthcheckLibpod(params *ContainerHealthcheckLibpodParams, opts ...ClientOption) (*ContainerHealthcheckLibpodOK, error)

	ContainerInitLibpod(params *ContainerInitLibpodParams, opts ...ClientOption) (*ContainerInitLibpodNoContent, error)

	ContainerInspect(params *ContainerInspectParams, opts ...ClientOption) (*ContainerInspectOK, error)

	ContainerInspectLibpod(params *ContainerInspectLibpodParams, opts ...ClientOption) (*ContainerInspectLibpodOK, error)

	ContainerKill(params *ContainerKillParams, opts ...ClientOption) (*ContainerKillNoContent, error)

	ContainerKillLibpod(params *ContainerKillLibpodParams, opts ...ClientOption) (*ContainerKillLibpodNoContent, error)

	ContainerList(params *ContainerListParams, opts ...ClientOption) (*ContainerListOK, error)

	ContainerListLibpod(params *ContainerListLibpodParams, opts ...ClientOption) (*ContainerListLibpodOK, error)

	ContainerLogs(params *ContainerLogsParams, opts ...ClientOption) (*ContainerLogsOK, error)

	ContainerLogsLibpod(params *ContainerLogsLibpodParams, opts ...ClientOption) (*ContainerLogsLibpodOK, error)

	ContainerMountLibpod(params *ContainerMountLibpodParams, opts ...ClientOption) (*ContainerMountLibpodOK, error)

	ContainerPause(params *ContainerPauseParams, opts ...ClientOption) (*ContainerPauseNoContent, error)

	ContainerPauseLibpod(params *ContainerPauseLibpodParams, opts ...ClientOption) (*ContainerPauseLibpodNoContent, error)

	ContainerPrune(params *ContainerPruneParams, opts ...ClientOption) (*ContainerPruneOK, error)

	ContainerPruneLibpod(params *ContainerPruneLibpodParams, opts ...ClientOption) (*ContainerPruneLibpodOK, error)

	ContainerRename(params *ContainerRenameParams, opts ...ClientOption) (*ContainerRenameNoContent, error)

	ContainerRenameLibpod(params *ContainerRenameLibpodParams, opts ...ClientOption) (*ContainerRenameLibpodNoContent, error)

	ContainerResize(params *ContainerResizeParams, opts ...ClientOption) (*ContainerResizeOK, error)

	ContainerResizeLibpod(params *ContainerResizeLibpodParams, opts ...ClientOption) (*ContainerResizeLibpodOK, error)

	ContainerRestart(params *ContainerRestartParams, opts ...ClientOption) (*ContainerRestartNoContent, error)

	ContainerRestartLibpod(params *ContainerRestartLibpodParams, opts ...ClientOption) (*ContainerRestartLibpodNoContent, error)

	ContainerRestoreLibpod(params *ContainerRestoreLibpodParams, opts ...ClientOption) (*ContainerRestoreLibpodOK, error)

	ContainerShowMountedLibpod(params *ContainerShowMountedLibpodParams, opts ...ClientOption) (*ContainerShowMountedLibpodOK, error)

	ContainerStart(params *ContainerStartParams, opts ...ClientOption) (*ContainerStartNoContent, error)

	ContainerStartLibpod(params *ContainerStartLibpodParams, opts ...ClientOption) (*ContainerStartLibpodNoContent, error)

	ContainerStats(params *ContainerStatsParams, opts ...ClientOption) (*ContainerStatsOK, error)

	ContainerStatsLibpod(params *ContainerStatsLibpodParams, opts ...ClientOption) (*ContainerStatsLibpodOK, error)

	ContainerStop(params *ContainerStopParams, opts ...ClientOption) (*ContainerStopNoContent, error)

	ContainerStopLibpod(params *ContainerStopLibpodParams, opts ...ClientOption) (*ContainerStopLibpodNoContent, error)

	ContainerTop(params *ContainerTopParams, opts ...ClientOption) (*ContainerTopOK, error)

	ContainerTopLibpod(params *ContainerTopLibpodParams, opts ...ClientOption) (*ContainerTopLibpodOK, error)

	ContainerUnmountLibpod(params *ContainerUnmountLibpodParams, opts ...ClientOption) (*ContainerUnmountLibpodNoContent, error)

	ContainerUnpause(params *ContainerUnpauseParams, opts ...ClientOption) (*ContainerUnpauseNoContent, error)

	ContainerUnpauseLibpod(params *ContainerUnpauseLibpodParams, opts ...ClientOption) (*ContainerUnpauseLibpodNoContent, error)

	ContainerWait(params *ContainerWaitParams, opts ...ClientOption) (*ContainerWaitOK, error)

	ContainerWaitLibpod(params *ContainerWaitLibpodParams, opts ...ClientOption) (*ContainerWaitLibpodOK, error)

	ContainersStatsAllLibpod(params *ContainersStatsAllLibpodParams, opts ...ClientOption) (*ContainersStatsAllLibpodOK, error)

	ExecInspect(params *ExecInspectParams, opts ...ClientOption) (*ExecInspectOK, error)

	ExecInspectLibpod(params *ExecInspectLibpodParams, opts ...ClientOption) (*ExecInspectLibpodOK, error)

	ExecResize(params *ExecResizeParams, opts ...ClientOption) (*ExecResizeCreated, error)

	ExecResizeLibpod(params *ExecResizeLibpodParams, opts ...ClientOption) (*ExecResizeLibpodCreated, error)

	ExecStart(params *ExecStartParams, opts ...ClientOption) (*ExecStartOK, error)

	ExecStartLibpod(params *ExecStartLibpodParams, opts ...ClientOption) (*ExecStartLibpodOK, error)

	GenerateKubeLibpod(params *GenerateKubeLibpodParams, writer io.Writer, opts ...ClientOption) (*GenerateKubeLibpodOK, error)

	GenerateSystemdLibpod(params *GenerateSystemdLibpodParams, opts ...ClientOption) (*GenerateSystemdLibpodOK, error)

	ImageBuild(params *ImageBuildParams, opts ...ClientOption) (*ImageBuildOK, error)

	ImageBuildLibpod(params *ImageBuildLibpodParams, opts ...ClientOption) (*ImageBuildLibpodOK, error)

	ImageChangesLibpod(params *ImageChangesLibpodParams, opts ...ClientOption) (*ImageChangesLibpodOK, error)

	ImageCommit(params *ImageCommitParams, opts ...ClientOption) (*ImageCommitCreated, error)

	ImageCommitLibpod(params *ImageCommitLibpodParams, opts ...ClientOption) (*ImageCommitLibpodCreated, error)

	ImageCreate(params *ImageCreateParams, writer io.Writer, opts ...ClientOption) (*ImageCreateOK, error)

	ImageDelete(params *ImageDeleteParams, opts ...ClientOption) (*ImageDeleteOK, error)

	ImageDeleteAllLibpod(params *ImageDeleteAllLibpodParams, opts ...ClientOption) (*ImageDeleteAllLibpodOK, error)

	ImageDeleteLibpod(params *ImageDeleteLibpodParams, opts ...ClientOption) (*ImageDeleteLibpodOK, error)

	ImageExistsLibpod(params *ImageExistsLibpodParams, opts ...ClientOption) (*ImageExistsLibpodNoContent, error)

	ImageExportLibpod(params *ImageExportLibpodParams, writer io.Writer, opts ...ClientOption) (*ImageExportLibpodOK, error)

	ImageGet(params *ImageGetParams, writer io.Writer, opts ...ClientOption) (*ImageGetOK, error)

	ImageGetAll(params *ImageGetAllParams, writer io.Writer, opts ...ClientOption) (*ImageGetAllOK, error)

	ImageGetLibpod(params *ImageGetLibpodParams, writer io.Writer, opts ...ClientOption) (*ImageGetLibpodOK, error)

	ImageHistory(params *ImageHistoryParams, opts ...ClientOption) (*ImageHistoryOK, error)

	ImageHistoryLibpod(params *ImageHistoryLibpodParams, opts ...ClientOption) (*ImageHistoryLibpodOK, error)

	ImageImportLibpod(params *ImageImportLibpodParams, opts ...ClientOption) (*ImageImportLibpodOK, error)

	ImageInspect(params *ImageInspectParams, opts ...ClientOption) (*ImageInspectOK, error)

	ImageInspectLibpod(params *ImageInspectLibpodParams, opts ...ClientOption) (*ImageInspectLibpodOK, error)

	ImageList(params *ImageListParams, opts ...ClientOption) (*ImageListOK, error)

	ImageListLibpod(params *ImageListLibpodParams, opts ...ClientOption) (*ImageListLibpodOK, error)

	ImageLoad(params *ImageLoadParams, opts ...ClientOption) (*ImageLoadOK, error)

	ImageLoadLibpod(params *ImageLoadLibpodParams, opts ...ClientOption) (*ImageLoadLibpodOK, error)

	ImagePrune(params *ImagePruneParams, opts ...ClientOption) (*ImagePruneOK, error)

	ImagePruneLibpod(params *ImagePruneLibpodParams, opts ...ClientOption) (*ImagePruneLibpodOK, error)

	ImagePullLibpod(params *ImagePullLibpodParams, opts ...ClientOption) (*ImagePullLibpodOK, error)

	ImagePush(params *ImagePushParams, writer io.Writer, opts ...ClientOption) (*ImagePushOK, error)

	ImagePushLibpod(params *ImagePushLibpodParams, writer io.Writer, opts ...ClientOption) (*ImagePushLibpodOK, error)

	ImageSearch(params *ImageSearchParams, opts ...ClientOption) (*ImageSearchOK, error)

	ImageSearchLibpod(params *ImageSearchLibpodParams, opts ...ClientOption) (*ImageSearchLibpodOK, error)

	ImageTag(params *ImageTagParams, opts ...ClientOption) (*ImageTagCreated, error)

	ImageTagLibpod(params *ImageTagLibpodParams, opts ...ClientOption) (*ImageTagLibpodCreated, error)

	ImageTreeLibpod(params *ImageTreeLibpodParams, opts ...ClientOption) (*ImageTreeLibpodOK, error)

	ImageUntagLibpod(params *ImageUntagLibpodParams, opts ...ClientOption) (*ImageUntagLibpodCreated, error)

	ManifestAddLibpod(params *ManifestAddLibpodParams, opts ...ClientOption) (*ManifestAddLibpodOK, error)

	ManifestCreateLibpod(params *ManifestCreateLibpodParams, opts ...ClientOption) (*ManifestCreateLibpodCreated, error)

	ManifestDeleteLibpod(params *ManifestDeleteLibpodParams, opts ...ClientOption) (*ManifestDeleteLibpodOK, error)

	ManifestExistsLibpod(params *ManifestExistsLibpodParams, opts ...ClientOption) (*ManifestExistsLibpodNoContent, error)

	ManifestInspectLibpod(params *ManifestInspectLibpodParams, opts ...ClientOption) (*ManifestInspectLibpodOK, error)

	ManifestModifyLibpod(params *ManifestModifyLibpodParams, opts ...ClientOption) (*ManifestModifyLibpodOK, error)

	ManifestPushLibpod(params *ManifestPushLibpodParams, opts ...ClientOption) (*ManifestPushLibpodOK, error)

	ManifestPushV3Libpod(params *ManifestPushV3LibpodParams, opts ...ClientOption) (*ManifestPushV3LibpodOK, error)

	NetworkConnect(params *NetworkConnectParams, opts ...ClientOption) (*NetworkConnectOK, error)

	NetworkConnectLibpod(params *NetworkConnectLibpodParams, opts ...ClientOption) (*NetworkConnectLibpodOK, error)

	NetworkCreate(params *NetworkCreateParams, opts ...ClientOption) (*NetworkCreateCreated, error)

	NetworkCreateLibpod(params *NetworkCreateLibpodParams, opts ...ClientOption) (*NetworkCreateLibpodOK, error)

	NetworkDelete(params *NetworkDeleteParams, opts ...ClientOption) (*NetworkDeleteNoContent, error)

	NetworkDeleteLibpod(params *NetworkDeleteLibpodParams, opts ...ClientOption) (*NetworkDeleteLibpodOK, error)

	NetworkDisconnect(params *NetworkDisconnectParams, opts ...ClientOption) (*NetworkDisconnectOK, error)

	NetworkDisconnectLibpod(params *NetworkDisconnectLibpodParams, opts ...ClientOption) (*NetworkDisconnectLibpodOK, error)

	NetworkExistsLibpod(params *NetworkExistsLibpodParams, opts ...ClientOption) (*NetworkExistsLibpodNoContent, error)

	NetworkInspect(params *NetworkInspectParams, opts ...ClientOption) (*NetworkInspectOK, error)

	NetworkInspectLibpod(params *NetworkInspectLibpodParams, opts ...ClientOption) (*NetworkInspectLibpodOK, error)

	NetworkList(params *NetworkListParams, opts ...ClientOption) (*NetworkListOK, error)

	NetworkListLibpod(params *NetworkListLibpodParams, opts ...ClientOption) (*NetworkListLibpodOK, error)

	NetworkPrune(params *NetworkPruneParams, opts ...ClientOption) (*NetworkPruneOK, error)

	NetworkPruneLibpod(params *NetworkPruneLibpodParams, opts ...ClientOption) (*NetworkPruneLibpodOK, error)

	PlayKubeDownLibpod(params *PlayKubeDownLibpodParams, opts ...ClientOption) (*PlayKubeDownLibpodOK, error)

	PlayKubeLibpod(params *PlayKubeLibpodParams, opts ...ClientOption) (*PlayKubeLibpodOK, error)

	PodCreateLibpod(params *PodCreateLibpodParams, opts ...ClientOption) (*PodCreateLibpodCreated, error)

	PodDeleteLibpod(params *PodDeleteLibpodParams, opts ...ClientOption) (*PodDeleteLibpodOK, error)

	PodExistsLibpod(params *PodExistsLibpodParams, opts ...ClientOption) (*PodExistsLibpodNoContent, error)

	PodInspectLibpod(params *PodInspectLibpodParams, opts ...ClientOption) (*PodInspectLibpodOK, error)

	PodKillLibpod(params *PodKillLibpodParams, opts ...ClientOption) (*PodKillLibpodOK, error)

	PodListLibpod(params *PodListLibpodParams, opts ...ClientOption) (*PodListLibpodOK, error)

	PodPauseLibpod(params *PodPauseLibpodParams, opts ...ClientOption) (*PodPauseLibpodOK, error)

	PodPruneLibpod(params *PodPruneLibpodParams, opts ...ClientOption) (*PodPruneLibpodOK, error)

	PodRestartLibpod(params *PodRestartLibpodParams, opts ...ClientOption) (*PodRestartLibpodOK, error)

	PodStartLibpod(params *PodStartLibpodParams, opts ...ClientOption) (*PodStartLibpodOK, error)

	PodStatsAllLibpod(params *PodStatsAllLibpodParams, opts ...ClientOption) (*PodStatsAllLibpodOK, error)

	PodStopLibpod(params *PodStopLibpodParams, opts ...ClientOption) (*PodStopLibpodOK, error)

	PodTopLibpod(params *PodTopLibpodParams, opts ...ClientOption) (*PodTopLibpodOK, error)

	PodUnpauseLibpod(params *PodUnpauseLibpodParams, opts ...ClientOption) (*PodUnpauseLibpodOK, error)

	PutContainerArchive(params *PutContainerArchiveParams, opts ...ClientOption) (*PutContainerArchiveOK, error)

	PutContainerArchiveLibpod(params *PutContainerArchiveLibpodParams, opts ...ClientOption) (*PutContainerArchiveLibpodOK, error)

	SecretCreate(params *SecretCreateParams, opts ...ClientOption) (*SecretCreateCreated, error)

	SecretCreateLibpod(params *SecretCreateLibpodParams, opts ...ClientOption) (*SecretCreateLibpodCreated, error)

	SecretDelete(params *SecretDeleteParams, opts ...ClientOption) (*SecretDeleteNoContent, error)

	SecretDeleteLibpod(params *SecretDeleteLibpodParams, opts ...ClientOption) (*SecretDeleteLibpodNoContent, error)

	SecretInspect(params *SecretInspectParams, opts ...ClientOption) (*SecretInspectOK, error)

	SecretInspectLibpod(params *SecretInspectLibpodParams, opts ...ClientOption) (*SecretInspectLibpodOK, error)

	SecretList(params *SecretListParams, opts ...ClientOption) (*SecretListOK, error)

	SecretListLibpod(params *SecretListLibpodParams, opts ...ClientOption) (*SecretListLibpodOK, error)

	SystemAuth(params *SystemAuthParams, opts ...ClientOption) (*SystemAuthOK, error)

	SystemDataUsage(params *SystemDataUsageParams, opts ...ClientOption) (*SystemDataUsageOK, error)

	SystemDataUsageLibpod(params *SystemDataUsageLibpodParams, opts ...ClientOption) (*SystemDataUsageLibpodOK, error)

	SystemEvents(params *SystemEventsParams, opts ...ClientOption) (*SystemEventsOK, error)

	SystemEventsLibpod(params *SystemEventsLibpodParams, opts ...ClientOption) (*SystemEventsLibpodOK, error)

	SystemInfo(params *SystemInfoParams, opts ...ClientOption) (*SystemInfoOK, error)

	SystemInfoLibpod(params *SystemInfoLibpodParams, opts ...ClientOption) (*SystemInfoLibpodOK, error)

	SystemPing(params *SystemPingParams, opts ...ClientOption) (*SystemPingOK, error)

	SystemPruneLibpod(params *SystemPruneLibpodParams, opts ...ClientOption) (*SystemPruneLibpodOK, error)

	SystemVersion(params *SystemVersionParams, opts ...ClientOption) (*SystemVersionOK, error)

	SystemVersionLibpod(params *SystemVersionLibpodParams, opts ...ClientOption) (*SystemVersionLibpodOK, error)

	VolumeCreate(params *VolumeCreateParams, opts ...ClientOption) (*VolumeCreateCreated, error)

	VolumeCreateLibpod(params *VolumeCreateLibpodParams, opts ...ClientOption) (*VolumeCreateLibpodCreated, error)

	VolumeDelete(params *VolumeDeleteParams, opts ...ClientOption) (*VolumeDeleteNoContent, error)

	VolumeDeleteLibpod(params *VolumeDeleteLibpodParams, opts ...ClientOption) (*VolumeDeleteLibpodNoContent, error)

	VolumeExistsLibpod(params *VolumeExistsLibpodParams, opts ...ClientOption) (*VolumeExistsLibpodNoContent, error)

	VolumeInspect(params *VolumeInspectParams, opts ...ClientOption) (*VolumeInspectOK, error)

	VolumeInspectLibpod(params *VolumeInspectLibpodParams, opts ...ClientOption) (*VolumeInspectLibpodOK, error)

	VolumeList(params *VolumeListParams, opts ...ClientOption) (*VolumeListOK, error)

	VolumeListLibpod(params *VolumeListLibpodParams, opts ...ClientOption) (*VolumeListLibpodOK, error)

	VolumePrune(params *VolumePruneParams, opts ...ClientOption) (*VolumePruneOK, error)

	VolumePruneLibpod(params *VolumePruneLibpodParams, opts ...ClientOption) (*VolumePruneLibpodOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ContainerArchive gets files from a container

  Get a tar archive of files from a container
*/
func (a *Client) ContainerArchive(params *ContainerArchiveParams, writer io.Writer, opts ...ClientOption) (*ContainerArchiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerArchiveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerArchive",
		Method:             "GET",
		PathPattern:        "/containers/{name}/archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerArchiveReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerArchiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerArchive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerArchiveLibpod copies files from a container

  Copy a tar archive of files from a container
*/
func (a *Client) ContainerArchiveLibpod(params *ContainerArchiveLibpodParams, writer io.Writer, opts ...ClientOption) (*ContainerArchiveLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerArchiveLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerArchiveLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/containers/{name}/archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerArchiveLibpodReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerArchiveLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerArchiveLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerAttach attaches to a container

  Hijacks the connection to forward the container's standard streams to the client.
*/
func (a *Client) ContainerAttach(params *ContainerAttachParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerAttachParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerAttach",
		Method:             "POST",
		PathPattern:        "/containers/{name}/attach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerAttachReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  ContainerAttachLibpod attaches to a container

  Hijacks the connection to forward the container's standard streams to the client.
*/
func (a *Client) ContainerAttachLibpod(params *ContainerAttachLibpodParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerAttachLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerAttachLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/attach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerAttachLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  ContainerChangesLibpod reports on changes to container s filesystem adds deletes or modifications

  Returns which files in a container's filesystem have been added, deleted, or modified. The Kind of modification can be one of:

0: Modified
1: Added
2: Deleted

*/
func (a *Client) ContainerChangesLibpod(params *ContainerChangesLibpodParams, opts ...ClientOption) (*ContainerChangesLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerChangesLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerChangesLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/containers/{name}/changes",
		ProducesMediaTypes: []string{"application/json", "application/octet-stream", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerChangesLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerChangesLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerChangesLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerCheckpointLibpod checkpoints a container
*/
func (a *Client) ContainerCheckpointLibpod(params *ContainerCheckpointLibpodParams, opts ...ClientOption) (*ContainerCheckpointLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerCheckpointLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerCheckpointLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/checkpoint",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerCheckpointLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerCheckpointLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerCheckpointLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerCreate creates a container
*/
func (a *Client) ContainerCreate(params *ContainerCreateParams, opts ...ClientOption) (*ContainerCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerCreate",
		Method:             "POST",
		PathPattern:        "/containers/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerCreateLibpod creates a container
*/
func (a *Client) ContainerCreateLibpod(params *ContainerCreateLibpodParams, opts ...ClientOption) (*ContainerCreateLibpodCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerCreateLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerCreateLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/containers/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerCreateLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerCreateLibpodCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerCreateLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerDelete removes a container
*/
func (a *Client) ContainerDelete(params *ContainerDeleteParams, opts ...ClientOption) (*ContainerDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerDelete",
		Method:             "DELETE",
		PathPattern:        "/containers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerDeleteLibpod deletes container

  Delete container
*/
func (a *Client) ContainerDeleteLibpod(params *ContainerDeleteLibpodParams, opts ...ClientOption) (*ContainerDeleteLibpodOK, *ContainerDeleteLibpodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerDeleteLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerDeleteLibpod",
		Method:             "DELETE",
		PathPattern:        "/libpod/containers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerDeleteLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ContainerDeleteLibpodOK:
		return value, nil, nil
	case *ContainerDeleteLibpodNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for operations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerExec creates an exec instance

  Create an exec session to run a command inside a running container. Exec sessions will be automatically removed 5 minutes after they exit.
*/
func (a *Client) ContainerExec(params *ContainerExecParams, opts ...ClientOption) (*ContainerExecCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerExecParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerExec",
		Method:             "POST",
		PathPattern:        "/containers/{name}/exec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerExecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerExecCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerExec: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerExecLibpod creates an exec instance

  Create an exec session to run a command inside a running container. Exec sessions will be automatically removed 5 minutes after they exit.
*/
func (a *Client) ContainerExecLibpod(params *ContainerExecLibpodParams, opts ...ClientOption) (*ContainerExecLibpodCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerExecLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerExecLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/exec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerExecLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerExecLibpodCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerExecLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerExistsLibpod checks if container exists

  Quick way to determine if a container exists by name or ID
*/
func (a *Client) ContainerExistsLibpod(params *ContainerExistsLibpodParams, opts ...ClientOption) (*ContainerExistsLibpodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerExistsLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerExistsLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/containers/{name}/exists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerExistsLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerExistsLibpodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerExistsLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerExport exports a container

  Export the contents of a container as a tarball.
*/
func (a *Client) ContainerExport(params *ContainerExportParams, opts ...ClientOption) (*ContainerExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerExport",
		Method:             "GET",
		PathPattern:        "/containers/{name}/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerExportLibpod exports a container

  Export the contents of a container as a tarball.
*/
func (a *Client) ContainerExportLibpod(params *ContainerExportLibpodParams, opts ...ClientOption) (*ContainerExportLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerExportLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerExportLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/containers/{name}/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerExportLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerExportLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerExportLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerHealthcheckLibpod runs a container s healthcheck

  Execute the defined healthcheck and return information about the results
*/
func (a *Client) ContainerHealthcheckLibpod(params *ContainerHealthcheckLibpodParams, opts ...ClientOption) (*ContainerHealthcheckLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerHealthcheckLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerHealthcheckLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/containers/{name}/healthcheck",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerHealthcheckLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerHealthcheckLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerHealthcheckLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerInitLibpod initializes a container

  Performs all tasks necessary for initializing the container but does not start the container.
*/
func (a *Client) ContainerInitLibpod(params *ContainerInitLibpodParams, opts ...ClientOption) (*ContainerInitLibpodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerInitLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerInitLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/init",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerInitLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerInitLibpodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerInitLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerInspect inspects container

  Return low-level information about a container.
*/
func (a *Client) ContainerInspect(params *ContainerInspectParams, opts ...ClientOption) (*ContainerInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerInspectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerInspect",
		Method:             "GET",
		PathPattern:        "/containers/{name}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerInspectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerInspectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerInspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerInspectLibpod inspects container

  Return low-level information about a container.
*/
func (a *Client) ContainerInspectLibpod(params *ContainerInspectLibpodParams, opts ...ClientOption) (*ContainerInspectLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerInspectLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerInspectLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/containers/{name}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerInspectLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerInspectLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerInspectLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerKill kills container

  Signal to send to the container as an integer or string (e.g. SIGINT)
*/
func (a *Client) ContainerKill(params *ContainerKillParams, opts ...ClientOption) (*ContainerKillNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerKillParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerKill",
		Method:             "POST",
		PathPattern:        "/containers/{name}/kill",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerKillReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerKillNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerKill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerKillLibpod kills container

  send a signal to a container, defaults to killing the container
*/
func (a *Client) ContainerKillLibpod(params *ContainerKillLibpodParams, opts ...ClientOption) (*ContainerKillLibpodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerKillLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerKillLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/kill",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerKillLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerKillLibpodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerKillLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerList lists containers

  Returns a list of containers
*/
func (a *Client) ContainerList(params *ContainerListParams, opts ...ClientOption) (*ContainerListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerList",
		Method:             "GET",
		PathPattern:        "/containers/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerListLibpod lists containers

  Returns a list of containers
*/
func (a *Client) ContainerListLibpod(params *ContainerListLibpodParams, opts ...ClientOption) (*ContainerListLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerListLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerListLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/containers/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerListLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerListLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerListLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerLogs gets container logs

  Get stdout and stderr logs from a container.
*/
func (a *Client) ContainerLogs(params *ContainerLogsParams, opts ...ClientOption) (*ContainerLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerLogs",
		Method:             "GET",
		PathPattern:        "/containers/{name}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerLogsLibpod gets container logs

  Get stdout and stderr logs from a container.
*/
func (a *Client) ContainerLogsLibpod(params *ContainerLogsLibpodParams, opts ...ClientOption) (*ContainerLogsLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerLogsLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerLogsLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/containers/{name}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerLogsLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerLogsLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerLogsLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerMountLibpod mounts a container

  Mount a container to the filesystem
*/
func (a *Client) ContainerMountLibpod(params *ContainerMountLibpodParams, opts ...ClientOption) (*ContainerMountLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerMountLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerMountLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/mount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerMountLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerMountLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerMountLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerPause pauses container

  Use the cgroups freezer to suspend all processes in a container.
*/
func (a *Client) ContainerPause(params *ContainerPauseParams, opts ...ClientOption) (*ContainerPauseNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerPauseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerPause",
		Method:             "POST",
		PathPattern:        "/containers/{name}/pause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerPauseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerPauseNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerPause: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerPauseLibpod pauses a container

  Use the cgroups freezer to suspend all processes in a container.
*/
func (a *Client) ContainerPauseLibpod(params *ContainerPauseLibpodParams, opts ...ClientOption) (*ContainerPauseLibpodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerPauseLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerPauseLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/pause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerPauseLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerPauseLibpodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerPauseLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerPrune deletes stopped containers

  Remove containers not in use
*/
func (a *Client) ContainerPrune(params *ContainerPruneParams, opts ...ClientOption) (*ContainerPruneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerPruneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerPrune",
		Method:             "POST",
		PathPattern:        "/containers/prune",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerPruneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerPruneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerPrune: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerPruneLibpod deletes stopped containers

  Remove containers not in use
*/
func (a *Client) ContainerPruneLibpod(params *ContainerPruneLibpodParams, opts ...ClientOption) (*ContainerPruneLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerPruneLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerPruneLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/containers/prune",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerPruneLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerPruneLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerPruneLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerRename renames an existing container

  Change the name of an existing container.
*/
func (a *Client) ContainerRename(params *ContainerRenameParams, opts ...ClientOption) (*ContainerRenameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerRenameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerRename",
		Method:             "POST",
		PathPattern:        "/containers/{name}/rename",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerRenameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerRenameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerRename: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerRenameLibpod renames an existing container

  Change the name of an existing container.
*/
func (a *Client) ContainerRenameLibpod(params *ContainerRenameLibpodParams, opts ...ClientOption) (*ContainerRenameLibpodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerRenameLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerRenameLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/rename",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerRenameLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerRenameLibpodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerRenameLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerResize resizes a container s t t y

  Resize the terminal attached to a container (for use with Attach).
*/
func (a *Client) ContainerResize(params *ContainerResizeParams, opts ...ClientOption) (*ContainerResizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerResizeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerResize",
		Method:             "POST",
		PathPattern:        "/containers/{name}/resize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerResizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerResizeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerResize: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerResizeLibpod resizes a container s t t y

  Resize the terminal attached to a container (for use with Attach).
*/
func (a *Client) ContainerResizeLibpod(params *ContainerResizeLibpodParams, opts ...ClientOption) (*ContainerResizeLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerResizeLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerResizeLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/resize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerResizeLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerResizeLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerResizeLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerRestart restarts container
*/
func (a *Client) ContainerRestart(params *ContainerRestartParams, opts ...ClientOption) (*ContainerRestartNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerRestartParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerRestart",
		Method:             "POST",
		PathPattern:        "/containers/{name}/restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerRestartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerRestartNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerRestart: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerRestartLibpod restarts a container
*/
func (a *Client) ContainerRestartLibpod(params *ContainerRestartLibpodParams, opts ...ClientOption) (*ContainerRestartLibpodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerRestartLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerRestartLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerRestartLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerRestartLibpodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerRestartLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerRestoreLibpod restores a container

  Restore a container from a checkpoint.
*/
func (a *Client) ContainerRestoreLibpod(params *ContainerRestoreLibpodParams, opts ...ClientOption) (*ContainerRestoreLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerRestoreLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerRestoreLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerRestoreLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerRestoreLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerRestoreLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerShowMountedLibpod shows mounted containers

  Lists all mounted containers mount points
*/
func (a *Client) ContainerShowMountedLibpod(params *ContainerShowMountedLibpodParams, opts ...ClientOption) (*ContainerShowMountedLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerShowMountedLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerShowMountedLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/containers/showmounted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerShowMountedLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerShowMountedLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerShowMountedLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerStart starts a container
*/
func (a *Client) ContainerStart(params *ContainerStartParams, opts ...ClientOption) (*ContainerStartNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerStartParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerStart",
		Method:             "POST",
		PathPattern:        "/containers/{name}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerStartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerStartNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerStart: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerStartLibpod starts a container
*/
func (a *Client) ContainerStartLibpod(params *ContainerStartLibpodParams, opts ...ClientOption) (*ContainerStartLibpodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerStartLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerStartLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerStartLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerStartLibpodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerStartLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerStats gets stats for a container

  This returns a live stream of a container’s resource usage statistics.
*/
func (a *Client) ContainerStats(params *ContainerStatsParams, opts ...ClientOption) (*ContainerStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerStats",
		Method:             "GET",
		PathPattern:        "/containers/{name}/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerStatsLibpod gets stats for a container

  DEPRECATED. This endpoint will be removed with the next major release. Please use /libpod/containers/stats instead.
*/
func (a *Client) ContainerStatsLibpod(params *ContainerStatsLibpodParams, opts ...ClientOption) (*ContainerStatsLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerStatsLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerStatsLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/containers/{name}/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerStatsLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerStatsLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerStatsLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerStop stops a container

  Stop a container
*/
func (a *Client) ContainerStop(params *ContainerStopParams, opts ...ClientOption) (*ContainerStopNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerStopParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerStop",
		Method:             "POST",
		PathPattern:        "/containers/{name}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerStopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerStopNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerStop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerStopLibpod stops a container
*/
func (a *Client) ContainerStopLibpod(params *ContainerStopLibpodParams, opts ...ClientOption) (*ContainerStopLibpodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerStopLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerStopLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerStopLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerStopLibpodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerStopLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerTop lists processes running inside a container
*/
func (a *Client) ContainerTop(params *ContainerTopParams, opts ...ClientOption) (*ContainerTopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerTopParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerTop",
		Method:             "GET",
		PathPattern:        "/containers/{name}/top",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerTopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerTopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerTop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerTopLibpod lists processes

  List processes running inside a container
*/
func (a *Client) ContainerTopLibpod(params *ContainerTopLibpodParams, opts ...ClientOption) (*ContainerTopLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerTopLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerTopLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/containers/{name}/top",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerTopLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerTopLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerTopLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerUnmountLibpod unmounts a container

  Unmount a container from the filesystem
*/
func (a *Client) ContainerUnmountLibpod(params *ContainerUnmountLibpodParams, opts ...ClientOption) (*ContainerUnmountLibpodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerUnmountLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerUnmountLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/unmount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerUnmountLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerUnmountLibpodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerUnmountLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerUnpause unpauses container

  Resume a paused container
*/
func (a *Client) ContainerUnpause(params *ContainerUnpauseParams, opts ...ClientOption) (*ContainerUnpauseNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerUnpauseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerUnpause",
		Method:             "POST",
		PathPattern:        "/containers/{name}/unpause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerUnpauseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerUnpauseNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerUnpause: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerUnpauseLibpod unpauses container
*/
func (a *Client) ContainerUnpauseLibpod(params *ContainerUnpauseLibpodParams, opts ...ClientOption) (*ContainerUnpauseLibpodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerUnpauseLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerUnpauseLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/unpause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerUnpauseLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerUnpauseLibpodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerUnpauseLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerWait waits on a container

  Block until a container stops or given condition is met.
*/
func (a *Client) ContainerWait(params *ContainerWaitParams, opts ...ClientOption) (*ContainerWaitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerWaitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerWait",
		Method:             "POST",
		PathPattern:        "/containers/{name}/wait",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerWaitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerWaitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerWait: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainerWaitLibpod waits on a container

  Wait on a container to met a given condition
*/
func (a *Client) ContainerWaitLibpod(params *ContainerWaitLibpodParams, opts ...ClientOption) (*ContainerWaitLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerWaitLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainerWaitLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/wait",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerWaitLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainerWaitLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainerWaitLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContainersStatsAllLibpod gets stats for one or more containers

  Return a live stream of resource usage statistics of one or more container. If no container is specified, the statistics of all containers are returned.
*/
func (a *Client) ContainersStatsAllLibpod(params *ContainersStatsAllLibpodParams, opts ...ClientOption) (*ContainersStatsAllLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainersStatsAllLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContainersStatsAllLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/containers/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainersStatsAllLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContainersStatsAllLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContainersStatsAllLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExecInspect inspects an exec instance

  Return low-level information about an exec instance.
*/
func (a *Client) ExecInspect(params *ExecInspectParams, opts ...ClientOption) (*ExecInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecInspectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecInspect",
		Method:             "GET",
		PathPattern:        "/exec/{id}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExecInspectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecInspectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecInspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExecInspectLibpod inspects an exec instance

  Return low-level information about an exec instance.
*/
func (a *Client) ExecInspectLibpod(params *ExecInspectLibpodParams, opts ...ClientOption) (*ExecInspectLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecInspectLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecInspectLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/exec/{id}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExecInspectLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecInspectLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecInspectLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExecResize resizes an exec instance

  Resize the TTY session used by an exec instance. This endpoint only works if tty was specified as part of creating and starting the exec instance.

*/
func (a *Client) ExecResize(params *ExecResizeParams, opts ...ClientOption) (*ExecResizeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecResizeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecResize",
		Method:             "POST",
		PathPattern:        "/exec/{id}/resize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExecResizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecResizeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecResize: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExecResizeLibpod resizes an exec instance

  Resize the TTY session used by an exec instance. This endpoint only works if tty was specified as part of creating and starting the exec instance.

*/
func (a *Client) ExecResizeLibpod(params *ExecResizeLibpodParams, opts ...ClientOption) (*ExecResizeLibpodCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecResizeLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecResizeLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/exec/{id}/resize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExecResizeLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecResizeLibpodCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecResizeLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExecStart starts an exec instance

  Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command.
*/
func (a *Client) ExecStart(params *ExecStartParams, opts ...ClientOption) (*ExecStartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecStartParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecStart",
		Method:             "POST",
		PathPattern:        "/exec/{id}/start",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExecStartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecStartOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecStart: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExecStartLibpod starts an exec instance

  Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command.
*/
func (a *Client) ExecStartLibpod(params *ExecStartLibpodParams, opts ...ClientOption) (*ExecStartLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecStartLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecStartLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/exec/{id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExecStartLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecStartLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecStartLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GenerateKubeLibpod generates a kubernetes y a m l file

  Generate Kubernetes YAML based on a pod or container.
*/
func (a *Client) GenerateKubeLibpod(params *GenerateKubeLibpodParams, writer io.Writer, opts ...ClientOption) (*GenerateKubeLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateKubeLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GenerateKubeLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/generate/kube",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GenerateKubeLibpodReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateKubeLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GenerateKubeLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GenerateSystemdLibpod generates systemd units

  Generate Systemd Units based on a pod or container.
*/
func (a *Client) GenerateSystemdLibpod(params *GenerateSystemdLibpodParams, opts ...ClientOption) (*GenerateSystemdLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateSystemdLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GenerateSystemdLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/generate/{name}/systemd",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GenerateSystemdLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateSystemdLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GenerateSystemdLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageBuild creates image

  Build an image from the given Dockerfile(s)
*/
func (a *Client) ImageBuild(params *ImageBuildParams, opts ...ClientOption) (*ImageBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageBuild",
		Method:             "POST",
		PathPattern:        "/build",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageBuildLibpod creates image

  Build an image from the given Dockerfile(s)
*/
func (a *Client) ImageBuildLibpod(params *ImageBuildLibpodParams, opts ...ClientOption) (*ImageBuildLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageBuildLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageBuildLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/build",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageBuildLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageBuildLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageBuildLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageChangesLibpod reports on changes to images s filesystem adds deletes or modifications

  Returns which files in a images's filesystem have been added, deleted, or modified. The Kind of modification can be one of:

0: Modified
1: Added
2: Deleted

*/
func (a *Client) ImageChangesLibpod(params *ImageChangesLibpodParams, opts ...ClientOption) (*ImageChangesLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageChangesLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageChangesLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/images/{name}/changes",
		ProducesMediaTypes: []string{"application/json", "application/octet-stream", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageChangesLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageChangesLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageChangesLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageCommit news image

  Create a new image from a container
*/
func (a *Client) ImageCommit(params *ImageCommitParams, opts ...ClientOption) (*ImageCommitCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageCommitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageCommit",
		Method:             "POST",
		PathPattern:        "/commit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageCommitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageCommitCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageCommit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageCommitLibpod commits

  Create a new image from a container
*/
func (a *Client) ImageCommitLibpod(params *ImageCommitLibpodParams, opts ...ClientOption) (*ImageCommitLibpodCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageCommitLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageCommitLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/commit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageCommitLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageCommitLibpodCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageCommitLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageCreate creates an image

  Create an image by either pulling it from a registry or importing it.
*/
func (a *Client) ImageCreate(params *ImageCreateParams, writer io.Writer, opts ...ClientOption) (*ImageCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageCreate",
		Method:             "POST",
		PathPattern:        "/images/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/octet-stream", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageCreateReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageDelete removes image

  Delete an image from local storage
*/
func (a *Client) ImageDelete(params *ImageDeleteParams, opts ...ClientOption) (*ImageDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageDelete",
		Method:             "DELETE",
		PathPattern:        "/images/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageDeleteAllLibpod removes one or more images from the storage

  Remove one or more images from the storage.
*/
func (a *Client) ImageDeleteAllLibpod(params *ImageDeleteAllLibpodParams, opts ...ClientOption) (*ImageDeleteAllLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageDeleteAllLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageDeleteAllLibpod",
		Method:             "DELETE",
		PathPattern:        "/libpod/images/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageDeleteAllLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageDeleteAllLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageDeleteAllLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageDeleteLibpod removes an image from the local storage

  Remove an image from the local storage.
*/
func (a *Client) ImageDeleteLibpod(params *ImageDeleteLibpodParams, opts ...ClientOption) (*ImageDeleteLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageDeleteLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageDeleteLibpod",
		Method:             "DELETE",
		PathPattern:        "/libpod/images/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageDeleteLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageDeleteLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageDeleteLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageExistsLibpod images exists

  Check if image exists in local store
*/
func (a *Client) ImageExistsLibpod(params *ImageExistsLibpodParams, opts ...ClientOption) (*ImageExistsLibpodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageExistsLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageExistsLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/images/{name}/exists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageExistsLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageExistsLibpodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageExistsLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageExportLibpod exports multiple images

  Export multiple images into a single object. Only `docker-archive` is currently supported.
*/
func (a *Client) ImageExportLibpod(params *ImageExportLibpodParams, writer io.Writer, opts ...ClientOption) (*ImageExportLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageExportLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageExportLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/images/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageExportLibpodReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageExportLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageExportLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageGet exports an image

  Export an image in tarball format
*/
func (a *Client) ImageGet(params *ImageGetParams, writer io.Writer, opts ...ClientOption) (*ImageGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageGet",
		Method:             "GET",
		PathPattern:        "/images/{name}/get",
		ProducesMediaTypes: []string{"application/x-tar"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageGetReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageGetAll exports several images

  Get a tarball containing all images and metadata for several image repositories
*/
func (a *Client) ImageGetAll(params *ImageGetAllParams, writer io.Writer, opts ...ClientOption) (*ImageGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageGetAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageGetAll",
		Method:             "GET",
		PathPattern:        "/images/get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageGetAllReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageGetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageGetLibpod exports an image

  Export an image
*/
func (a *Client) ImageGetLibpod(params *ImageGetLibpodParams, writer io.Writer, opts ...ClientOption) (*ImageGetLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageGetLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageGetLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/images/{name}/get",
		ProducesMediaTypes: []string{"application/x-tar"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageGetLibpodReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageGetLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageGetLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageHistory histories of an image

  Return parent layers of an image.
*/
func (a *Client) ImageHistory(params *ImageHistoryParams, opts ...ClientOption) (*ImageHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageHistory",
		Method:             "GET",
		PathPattern:        "/images/{name}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageHistoryLibpod histories of an image

  Return parent layers of an image.
*/
func (a *Client) ImageHistoryLibpod(params *ImageHistoryLibpodParams, opts ...ClientOption) (*ImageHistoryLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageHistoryLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageHistoryLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/images/{name}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageHistoryLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageHistoryLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageHistoryLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageImportLibpod imports image

  Import a previously exported tarball as an image.
*/
func (a *Client) ImageImportLibpod(params *ImageImportLibpodParams, opts ...ClientOption) (*ImageImportLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageImportLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageImportLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/images/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageImportLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageImportLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageImportLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageInspect inspects an image

  Return low-level information about an image.
*/
func (a *Client) ImageInspect(params *ImageInspectParams, opts ...ClientOption) (*ImageInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageInspectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageInspect",
		Method:             "GET",
		PathPattern:        "/images/{name}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageInspectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageInspectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageInspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageInspectLibpod inspects an image

  Obtain low-level information about an image
*/
func (a *Client) ImageInspectLibpod(params *ImageInspectLibpodParams, opts ...ClientOption) (*ImageInspectLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageInspectLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageInspectLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/images/{name}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageInspectLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageInspectLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageInspectLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageList lists images

  Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
*/
func (a *Client) ImageList(params *ImageListParams, opts ...ClientOption) (*ImageListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageList",
		Method:             "GET",
		PathPattern:        "/images/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageListLibpod lists images

  Returns a list of images on the server
*/
func (a *Client) ImageListLibpod(params *ImageListLibpodParams, opts ...ClientOption) (*ImageListLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageListLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageListLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/images/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageListLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageListLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageListLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageLoad imports image

  Load a set of images and tags into a repository.
*/
func (a *Client) ImageLoad(params *ImageLoadParams, opts ...ClientOption) (*ImageLoadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageLoadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageLoad",
		Method:             "POST",
		PathPattern:        "/images/load",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageLoadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageLoadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageLoad: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageLoadLibpod loads image

  Load an image (oci-archive or docker-archive) stream.
*/
func (a *Client) ImageLoadLibpod(params *ImageLoadLibpodParams, opts ...ClientOption) (*ImageLoadLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageLoadLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageLoadLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/images/load",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageLoadLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageLoadLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageLoadLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImagePrune prunes unused images

  Remove images from local storage that are not being used by a container
*/
func (a *Client) ImagePrune(params *ImagePruneParams, opts ...ClientOption) (*ImagePruneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImagePruneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImagePrune",
		Method:             "POST",
		PathPattern:        "/images/prune",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImagePruneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImagePruneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImagePrune: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImagePruneLibpod prunes unused images

  Remove images that are not being used by a container
*/
func (a *Client) ImagePruneLibpod(params *ImagePruneLibpodParams, opts ...ClientOption) (*ImagePruneLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImagePruneLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImagePruneLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/images/prune",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImagePruneLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImagePruneLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImagePruneLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImagePullLibpod pulls images

  Pull one or more images from a container registry.
*/
func (a *Client) ImagePullLibpod(params *ImagePullLibpodParams, opts ...ClientOption) (*ImagePullLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImagePullLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImagePullLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/images/pull",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImagePullLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImagePullLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImagePullLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImagePush pushes image

  Push an image to a container registry
*/
func (a *Client) ImagePush(params *ImagePushParams, writer io.Writer, opts ...ClientOption) (*ImagePushOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImagePushParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImagePush",
		Method:             "POST",
		PathPattern:        "/images/{name}/push",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImagePushReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImagePushOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImagePush: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImagePushLibpod pushes image

  Push an image to a container registry
*/
func (a *Client) ImagePushLibpod(params *ImagePushLibpodParams, writer io.Writer, opts ...ClientOption) (*ImagePushLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImagePushLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImagePushLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/images/{name}/push",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImagePushLibpodReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImagePushLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImagePushLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageSearch searches images

  Search registries for an image
*/
func (a *Client) ImageSearch(params *ImageSearchParams, opts ...ClientOption) (*ImageSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageSearch",
		Method:             "GET",
		PathPattern:        "/images/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageSearchLibpod searches images

  Search registries for images
*/
func (a *Client) ImageSearchLibpod(params *ImageSearchLibpodParams, opts ...ClientOption) (*ImageSearchLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageSearchLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageSearchLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/images/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageSearchLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageSearchLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageSearchLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageTag tags an image

  Tag an image so that it becomes part of a repository.
*/
func (a *Client) ImageTag(params *ImageTagParams, opts ...ClientOption) (*ImageTagCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageTag",
		Method:             "POST",
		PathPattern:        "/images/{name}/tag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageTagReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageTagCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageTagLibpod tags an image

  Tag an image so that it becomes part of a repository.
*/
func (a *Client) ImageTagLibpod(params *ImageTagLibpodParams, opts ...ClientOption) (*ImageTagLibpodCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageTagLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageTagLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/images/{name}/tag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageTagLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageTagLibpodCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageTagLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageTreeLibpod images tree

  Retrieve the image tree for the provided image name or ID
*/
func (a *Client) ImageTreeLibpod(params *ImageTreeLibpodParams, opts ...ClientOption) (*ImageTreeLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageTreeLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageTreeLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/images/{name}/tree",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageTreeLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageTreeLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageTreeLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImageUntagLibpod untags an image

  Untag an image. If not repo and tag are specified, all tags are removed from the image.
*/
func (a *Client) ImageUntagLibpod(params *ImageUntagLibpodParams, opts ...ClientOption) (*ImageUntagLibpodCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageUntagLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImageUntagLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/images/{name}/untag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImageUntagLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageUntagLibpodCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImageUntagLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ManifestAddLibpod adds image

  Add an image to a manifest list

Deprecated: As of 4.0.0 use ManifestModifyLibpod instead

*/
func (a *Client) ManifestAddLibpod(params *ManifestAddLibpodParams, opts ...ClientOption) (*ManifestAddLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewManifestAddLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ManifestAddLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/manifests/{name}/add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ManifestAddLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManifestAddLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ManifestAddLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ManifestCreateLibpod creates

  Create a manifest list
*/
func (a *Client) ManifestCreateLibpod(params *ManifestCreateLibpodParams, opts ...ClientOption) (*ManifestCreateLibpodCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewManifestCreateLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ManifestCreateLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/manifests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ManifestCreateLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManifestCreateLibpodCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ManifestCreateLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ManifestDeleteLibpod deletes manifest list

  Delete named manifest list

As of v4.0.0

*/
func (a *Client) ManifestDeleteLibpod(params *ManifestDeleteLibpodParams, opts ...ClientOption) (*ManifestDeleteLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewManifestDeleteLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ManifestDeleteLibpod",
		Method:             "DELETE",
		PathPattern:        "/libpod/manifests/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ManifestDeleteLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManifestDeleteLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ManifestDeleteLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ManifestExistsLibpod exists

  Check if manifest list exists

Note: There is no contract that the manifest list will exist for a follow-on operation

*/
func (a *Client) ManifestExistsLibpod(params *ManifestExistsLibpodParams, opts ...ClientOption) (*ManifestExistsLibpodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewManifestExistsLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ManifestExistsLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/manifests/{name}/exists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ManifestExistsLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManifestExistsLibpodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ManifestExistsLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ManifestInspectLibpod inspects

  Display attributes of given manifest list
*/
func (a *Client) ManifestInspectLibpod(params *ManifestInspectLibpodParams, opts ...ClientOption) (*ManifestInspectLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewManifestInspectLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ManifestInspectLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/manifests/{name}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ManifestInspectLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManifestInspectLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ManifestInspectLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ManifestModifyLibpod modifies manifest list

  Add/Remove an image(s) to a manifest list

Note: operations are not atomic when multiple Images are provided.

As of v4.0.0

*/
func (a *Client) ManifestModifyLibpod(params *ManifestModifyLibpodParams, opts ...ClientOption) (*ManifestModifyLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewManifestModifyLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ManifestModifyLibpod",
		Method:             "PUT",
		PathPattern:        "/libpod/manifests/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ManifestModifyLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManifestModifyLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ManifestModifyLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ManifestPushLibpod pushes manifest list to registry

  Push a manifest list or image index to the named registry

As of v4.0.0

*/
func (a *Client) ManifestPushLibpod(params *ManifestPushLibpodParams, opts ...ClientOption) (*ManifestPushLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewManifestPushLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ManifestPushLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/manifests/{name}/registry/{destination}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ManifestPushLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManifestPushLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ManifestPushLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ManifestPushV3Libpod pushes manifest to registry

  Push a manifest list or image index to a registry

Deprecated: As of 4.0.0 use ManifestPushLibpod instead

*/
func (a *Client) ManifestPushV3Libpod(params *ManifestPushV3LibpodParams, opts ...ClientOption) (*ManifestPushV3LibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewManifestPushV3LibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ManifestPushV3Libpod",
		Method:             "POST",
		PathPattern:        "/libpod/manifests/{name}/push",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ManifestPushV3LibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManifestPushV3LibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ManifestPushV3Libpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NetworkConnect connects container to network

  Connect a container to a network.  This endpoint is current a no-op
*/
func (a *Client) NetworkConnect(params *NetworkConnectParams, opts ...ClientOption) (*NetworkConnectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkConnectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkConnect",
		Method:             "POST",
		PathPattern:        "/networks/{name}/connect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NetworkConnectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkConnectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NetworkConnect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NetworkConnectLibpod connects container to network

  Connect a container to a network.
*/
func (a *Client) NetworkConnectLibpod(params *NetworkConnectLibpodParams, opts ...ClientOption) (*NetworkConnectLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkConnectLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkConnectLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/networks/{name}/connect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NetworkConnectLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkConnectLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NetworkConnectLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NetworkCreate creates network

  Create a network configuration
*/
func (a *Client) NetworkCreate(params *NetworkCreateParams, opts ...ClientOption) (*NetworkCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkCreate",
		Method:             "POST",
		PathPattern:        "/networks/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NetworkCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NetworkCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NetworkCreateLibpod creates network

  Create a new network configuration
*/
func (a *Client) NetworkCreateLibpod(params *NetworkCreateLibpodParams, opts ...ClientOption) (*NetworkCreateLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkCreateLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkCreateLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/networks/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NetworkCreateLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkCreateLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NetworkCreateLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NetworkDelete removes a network

  Remove a network
*/
func (a *Client) NetworkDelete(params *NetworkDeleteParams, opts ...ClientOption) (*NetworkDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkDelete",
		Method:             "DELETE",
		PathPattern:        "/networks/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NetworkDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NetworkDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NetworkDeleteLibpod removes a network

  Remove a CNI configured network
*/
func (a *Client) NetworkDeleteLibpod(params *NetworkDeleteLibpodParams, opts ...ClientOption) (*NetworkDeleteLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkDeleteLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkDeleteLibpod",
		Method:             "DELETE",
		PathPattern:        "/libpod/networks/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NetworkDeleteLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkDeleteLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NetworkDeleteLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NetworkDisconnect disconnects container from network

  Disconnect a container from a network.  This endpoint is current a no-op
*/
func (a *Client) NetworkDisconnect(params *NetworkDisconnectParams, opts ...ClientOption) (*NetworkDisconnectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkDisconnectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkDisconnect",
		Method:             "POST",
		PathPattern:        "/networks/{name}/disconnect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NetworkDisconnectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkDisconnectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NetworkDisconnect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NetworkDisconnectLibpod disconnects container from network

  Disconnect a container from a network.
*/
func (a *Client) NetworkDisconnectLibpod(params *NetworkDisconnectLibpodParams, opts ...ClientOption) (*NetworkDisconnectLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkDisconnectLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkDisconnectLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/networks/{name}/disconnect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NetworkDisconnectLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkDisconnectLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NetworkDisconnectLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NetworkExistsLibpod networks exists

  Check if network exists
*/
func (a *Client) NetworkExistsLibpod(params *NetworkExistsLibpodParams, opts ...ClientOption) (*NetworkExistsLibpodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkExistsLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkExistsLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/networks/{name}/exists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NetworkExistsLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkExistsLibpodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NetworkExistsLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NetworkInspect inspects a network

  Display low level configuration network
*/
func (a *Client) NetworkInspect(params *NetworkInspectParams, opts ...ClientOption) (*NetworkInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkInspectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkInspect",
		Method:             "GET",
		PathPattern:        "/networks/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NetworkInspectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkInspectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NetworkInspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NetworkInspectLibpod inspects a network

  Display low level configuration for a CNI network.
  - In a 200 response, all of the fields named Bytes are returned as a Base64 encoded string.

*/
func (a *Client) NetworkInspectLibpod(params *NetworkInspectLibpodParams, opts ...ClientOption) (*NetworkInspectLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkInspectLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkInspectLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/networks/{name}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NetworkInspectLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkInspectLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NetworkInspectLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NetworkList lists networks

  Display summary of network configurations
*/
func (a *Client) NetworkList(params *NetworkListParams, opts ...ClientOption) (*NetworkListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkList",
		Method:             "GET",
		PathPattern:        "/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NetworkListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NetworkList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NetworkListLibpod lists networks

  Display summary of network configurations.
  - In a 200 response, all of the fields named Bytes are returned as a Base64 encoded string.

*/
func (a *Client) NetworkListLibpod(params *NetworkListLibpodParams, opts ...ClientOption) (*NetworkListLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkListLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkListLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/networks/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NetworkListLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkListLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NetworkListLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NetworkPrune deletes unused networks

  Remove CNI networks that do not have containers
*/
func (a *Client) NetworkPrune(params *NetworkPruneParams, opts ...ClientOption) (*NetworkPruneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkPruneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkPrune",
		Method:             "POST",
		PathPattern:        "/networks/prune",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NetworkPruneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkPruneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NetworkPrune: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NetworkPruneLibpod deletes unused networks

  Remove CNI networks that do not have containers
*/
func (a *Client) NetworkPruneLibpod(params *NetworkPruneLibpodParams, opts ...ClientOption) (*NetworkPruneLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkPruneLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkPruneLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/networks/prune",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NetworkPruneLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkPruneLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NetworkPruneLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PlayKubeDownLibpod removes pods from play kube

  Tears down pods defined in a YAML file
*/
func (a *Client) PlayKubeDownLibpod(params *PlayKubeDownLibpodParams, opts ...ClientOption) (*PlayKubeDownLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlayKubeDownLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlayKubeDownLibpod",
		Method:             "DELETE",
		PathPattern:        "/libpod/play/kube",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PlayKubeDownLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlayKubeDownLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlayKubeDownLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PlayKubeLibpod plays a kubernetes y a m l file

  Create and run pods based on a Kubernetes YAML file (pod or service kind).
*/
func (a *Client) PlayKubeLibpod(params *PlayKubeLibpodParams, opts ...ClientOption) (*PlayKubeLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlayKubeLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PlayKubeLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/play/kube",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PlayKubeLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlayKubeLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PlayKubeLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PodCreateLibpod creates a pod
*/
func (a *Client) PodCreateLibpod(params *PodCreateLibpodParams, opts ...ClientOption) (*PodCreateLibpodCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPodCreateLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PodCreateLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/pods/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PodCreateLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PodCreateLibpodCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PodCreateLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PodDeleteLibpod removes pod
*/
func (a *Client) PodDeleteLibpod(params *PodDeleteLibpodParams, opts ...ClientOption) (*PodDeleteLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPodDeleteLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PodDeleteLibpod",
		Method:             "DELETE",
		PathPattern:        "/libpod/pods/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PodDeleteLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PodDeleteLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PodDeleteLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PodExistsLibpod pods exists

  Check if a pod exists by name or ID
*/
func (a *Client) PodExistsLibpod(params *PodExistsLibpodParams, opts ...ClientOption) (*PodExistsLibpodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPodExistsLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PodExistsLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/pods/{name}/exists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PodExistsLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PodExistsLibpodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PodExistsLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PodInspectLibpod inspects pod
*/
func (a *Client) PodInspectLibpod(params *PodInspectLibpodParams, opts ...ClientOption) (*PodInspectLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPodInspectLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PodInspectLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/pods/{name}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PodInspectLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PodInspectLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PodInspectLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PodKillLibpod kills a pod
*/
func (a *Client) PodKillLibpod(params *PodKillLibpodParams, opts ...ClientOption) (*PodKillLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPodKillLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PodKillLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/pods/{name}/kill",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PodKillLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PodKillLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PodKillLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PodListLibpod lists pods
*/
func (a *Client) PodListLibpod(params *PodListLibpodParams, opts ...ClientOption) (*PodListLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPodListLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PodListLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/pods/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PodListLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PodListLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PodListLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PodPauseLibpod pauses a pod

  Pause a pod
*/
func (a *Client) PodPauseLibpod(params *PodPauseLibpodParams, opts ...ClientOption) (*PodPauseLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPodPauseLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PodPauseLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/pods/{name}/pause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PodPauseLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PodPauseLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PodPauseLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PodPruneLibpod prunes unused pods
*/
func (a *Client) PodPruneLibpod(params *PodPruneLibpodParams, opts ...ClientOption) (*PodPruneLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPodPruneLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PodPruneLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/pods/prune",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PodPruneLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PodPruneLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PodPruneLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PodRestartLibpod restarts a pod
*/
func (a *Client) PodRestartLibpod(params *PodRestartLibpodParams, opts ...ClientOption) (*PodRestartLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPodRestartLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PodRestartLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/pods/{name}/restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PodRestartLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PodRestartLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PodRestartLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PodStartLibpod starts a pod
*/
func (a *Client) PodStartLibpod(params *PodStartLibpodParams, opts ...ClientOption) (*PodStartLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPodStartLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PodStartLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/pods/{name}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PodStartLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PodStartLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PodStartLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PodStatsAllLibpod gets stats for one or more pods

  Display a live stream of resource usage statistics for the containers in one or more pods
*/
func (a *Client) PodStatsAllLibpod(params *PodStatsAllLibpodParams, opts ...ClientOption) (*PodStatsAllLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPodStatsAllLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PodStatsAllLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/pods/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PodStatsAllLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PodStatsAllLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PodStatsAllLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PodStopLibpod stops a pod
*/
func (a *Client) PodStopLibpod(params *PodStopLibpodParams, opts ...ClientOption) (*PodStopLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPodStopLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PodStopLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/pods/{name}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PodStopLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PodStopLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PodStopLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PodTopLibpod lists processes

  List processes running inside a pod
*/
func (a *Client) PodTopLibpod(params *PodTopLibpodParams, opts ...ClientOption) (*PodTopLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPodTopLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PodTopLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/pods/{name}/top",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PodTopLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PodTopLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PodTopLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PodUnpauseLibpod unpauses a pod
*/
func (a *Client) PodUnpauseLibpod(params *PodUnpauseLibpodParams, opts ...ClientOption) (*PodUnpauseLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPodUnpauseLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PodUnpauseLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/pods/{name}/unpause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PodUnpauseLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PodUnpauseLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PodUnpauseLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutContainerArchive puts files into a container

  Put a tar archive of files into a container
*/
func (a *Client) PutContainerArchive(params *PutContainerArchiveParams, opts ...ClientOption) (*PutContainerArchiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutContainerArchiveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutContainerArchive",
		Method:             "PUT",
		PathPattern:        "/containers/{name}/archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutContainerArchiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutContainerArchiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutContainerArchive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutContainerArchiveLibpod copies files into a container

  Copy a tar archive of files into a container
*/
func (a *Client) PutContainerArchiveLibpod(params *PutContainerArchiveLibpodParams, opts ...ClientOption) (*PutContainerArchiveLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutContainerArchiveLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutContainerArchiveLibpod",
		Method:             "PUT",
		PathPattern:        "/libpod/containers/{name}/archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutContainerArchiveLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutContainerArchiveLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutContainerArchiveLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SecretCreate creates a secret
*/
func (a *Client) SecretCreate(params *SecretCreateParams, opts ...ClientOption) (*SecretCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretCreate",
		Method:             "POST",
		PathPattern:        "/secrets/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SecretCreateLibpod creates a secret
*/
func (a *Client) SecretCreateLibpod(params *SecretCreateLibpodParams, opts ...ClientOption) (*SecretCreateLibpodCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretCreateLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretCreateLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/secrets/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretCreateLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretCreateLibpodCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretCreateLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SecretDelete removes secret
*/
func (a *Client) SecretDelete(params *SecretDeleteParams, opts ...ClientOption) (*SecretDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretDelete",
		Method:             "DELETE",
		PathPattern:        "/secrets/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SecretDeleteLibpod removes secret
*/
func (a *Client) SecretDeleteLibpod(params *SecretDeleteLibpodParams, opts ...ClientOption) (*SecretDeleteLibpodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretDeleteLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretDeleteLibpod",
		Method:             "DELETE",
		PathPattern:        "/libpod/secrets/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretDeleteLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretDeleteLibpodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretDeleteLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SecretInspect inspects secret
*/
func (a *Client) SecretInspect(params *SecretInspectParams, opts ...ClientOption) (*SecretInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretInspectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretInspect",
		Method:             "GET",
		PathPattern:        "/secrets/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretInspectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretInspectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretInspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SecretInspectLibpod inspects secret
*/
func (a *Client) SecretInspectLibpod(params *SecretInspectLibpodParams, opts ...ClientOption) (*SecretInspectLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretInspectLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretInspectLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/secrets/{name}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretInspectLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretInspectLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretInspectLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SecretList lists secrets

  Returns a list of secrets
*/
func (a *Client) SecretList(params *SecretListParams, opts ...ClientOption) (*SecretListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretList",
		Method:             "GET",
		PathPattern:        "/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SecretListLibpod lists secrets

  Returns a list of secrets
*/
func (a *Client) SecretListLibpod(params *SecretListLibpodParams, opts ...ClientOption) (*SecretListLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretListLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretListLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/secrets/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretListLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretListLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecretListLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SystemAuth checks auth configuration
*/
func (a *Client) SystemAuth(params *SystemAuthParams, opts ...ClientOption) (*SystemAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemAuthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SystemAuth",
		Method:             "POST",
		PathPattern:        "/auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SystemAuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemAuthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemAuth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SystemDataUsage shows disk usage

  Return information about disk usage for containers, images, and volumes
*/
func (a *Client) SystemDataUsage(params *SystemDataUsageParams, opts ...ClientOption) (*SystemDataUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemDataUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SystemDataUsage",
		Method:             "GET",
		PathPattern:        "/system/df",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SystemDataUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemDataUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemDataUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SystemDataUsageLibpod shows disk usage

  Return information about disk usage for containers, images, and volumes
*/
func (a *Client) SystemDataUsageLibpod(params *SystemDataUsageLibpodParams, opts ...ClientOption) (*SystemDataUsageLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemDataUsageLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SystemDataUsageLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/system/df",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SystemDataUsageLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemDataUsageLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemDataUsageLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SystemEvents gets events

  Returns events filtered on query parameters
*/
func (a *Client) SystemEvents(params *SystemEventsParams, opts ...ClientOption) (*SystemEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SystemEvents",
		Method:             "GET",
		PathPattern:        "/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SystemEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SystemEventsLibpod gets events

  Returns events filtered on query parameters
*/
func (a *Client) SystemEventsLibpod(params *SystemEventsLibpodParams, opts ...ClientOption) (*SystemEventsLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemEventsLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SystemEventsLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SystemEventsLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemEventsLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemEventsLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SystemInfo gets info

  Returns information on the system and libpod configuration
*/
func (a *Client) SystemInfo(params *SystemInfoParams, opts ...ClientOption) (*SystemInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SystemInfo",
		Method:             "GET",
		PathPattern:        "/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SystemInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SystemInfoLibpod gets info

  Returns information on the system and libpod configuration
*/
func (a *Client) SystemInfoLibpod(params *SystemInfoLibpodParams, opts ...ClientOption) (*SystemInfoLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemInfoLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SystemInfoLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SystemInfoLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemInfoLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemInfoLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SystemPing pings service

  Return protocol information in response headers.
`HEAD /libpod/_ping` is also supported.
`/_ping` is available for compatibility with other engines.
The '_ping' endpoints are not versioned.

*/
func (a *Client) SystemPing(params *SystemPingParams, opts ...ClientOption) (*SystemPingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemPingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SystemPing",
		Method:             "GET",
		PathPattern:        "/libpod/_ping",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SystemPingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemPingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemPing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SystemPruneLibpod prunes unused data
*/
func (a *Client) SystemPruneLibpod(params *SystemPruneLibpodParams, opts ...ClientOption) (*SystemPruneLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemPruneLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SystemPruneLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/system/prune",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SystemPruneLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemPruneLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemPruneLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SystemVersion components version information
*/
func (a *Client) SystemVersion(params *SystemVersionParams, opts ...ClientOption) (*SystemVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SystemVersion",
		Method:             "GET",
		PathPattern:        "/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SystemVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SystemVersionLibpod components version information
*/
func (a *Client) SystemVersionLibpod(params *SystemVersionLibpodParams, opts ...ClientOption) (*SystemVersionLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemVersionLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SystemVersionLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SystemVersionLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemVersionLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemVersionLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VolumeCreate creates a volume
*/
func (a *Client) VolumeCreate(params *VolumeCreateParams, opts ...ClientOption) (*VolumeCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeCreate",
		Method:             "POST",
		PathPattern:        "/volumes/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &VolumeCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VolumeCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VolumeCreateLibpod creates a volume
*/
func (a *Client) VolumeCreateLibpod(params *VolumeCreateLibpodParams, opts ...ClientOption) (*VolumeCreateLibpodCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeCreateLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeCreateLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/volumes/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &VolumeCreateLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeCreateLibpodCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VolumeCreateLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VolumeDelete removes volume
*/
func (a *Client) VolumeDelete(params *VolumeDeleteParams, opts ...ClientOption) (*VolumeDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeDelete",
		Method:             "DELETE",
		PathPattern:        "/volumes/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &VolumeDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VolumeDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VolumeDeleteLibpod removes volume
*/
func (a *Client) VolumeDeleteLibpod(params *VolumeDeleteLibpodParams, opts ...ClientOption) (*VolumeDeleteLibpodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeDeleteLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeDeleteLibpod",
		Method:             "DELETE",
		PathPattern:        "/libpod/volumes/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &VolumeDeleteLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeDeleteLibpodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VolumeDeleteLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VolumeExistsLibpod volumes exists

  Check if a volume exists
*/
func (a *Client) VolumeExistsLibpod(params *VolumeExistsLibpodParams, opts ...ClientOption) (*VolumeExistsLibpodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeExistsLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeExistsLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/volumes/{name}/exists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &VolumeExistsLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeExistsLibpodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VolumeExistsLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VolumeInspect inspects volume
*/
func (a *Client) VolumeInspect(params *VolumeInspectParams, opts ...ClientOption) (*VolumeInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeInspectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeInspect",
		Method:             "GET",
		PathPattern:        "/volumes/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &VolumeInspectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeInspectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VolumeInspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VolumeInspectLibpod inspects volume
*/
func (a *Client) VolumeInspectLibpod(params *VolumeInspectLibpodParams, opts ...ClientOption) (*VolumeInspectLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeInspectLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeInspectLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/volumes/{name}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &VolumeInspectLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeInspectLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VolumeInspectLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VolumeList lists volumes

  Returns a list of volume
*/
func (a *Client) VolumeList(params *VolumeListParams, opts ...ClientOption) (*VolumeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeList",
		Method:             "GET",
		PathPattern:        "/volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &VolumeListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VolumeList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VolumeListLibpod lists volumes

  Returns a list of volumes
*/
func (a *Client) VolumeListLibpod(params *VolumeListLibpodParams, opts ...ClientOption) (*VolumeListLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeListLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeListLibpod",
		Method:             "GET",
		PathPattern:        "/libpod/volumes/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &VolumeListLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeListLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VolumeListLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VolumePrune prunes volumes
*/
func (a *Client) VolumePrune(params *VolumePruneParams, opts ...ClientOption) (*VolumePruneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumePruneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumePrune",
		Method:             "POST",
		PathPattern:        "/volumes/prune",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &VolumePruneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumePruneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VolumePrune: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VolumePruneLibpod prunes volumes
*/
func (a *Client) VolumePruneLibpod(params *VolumePruneLibpodParams, opts ...ClientOption) (*VolumePruneLibpodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumePruneLibpodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumePruneLibpod",
		Method:             "POST",
		PathPattern:        "/libpod/volumes/prune",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &VolumePruneLibpodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumePruneLibpodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VolumePruneLibpod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
